import cv2
import numpy as np
import statistics
import time

#funtion to read and extract table from input image

def extract_table(img):
    img.shape
    #thresholding the image to a binary image
    #thresh,img_bin = cv2.threshold(img,128,255,cv2.THRESH_BINARY |cv2.THRESH_OTSU)
    thresh,img_bin = cv2.threshold(img,128,255,cv2.THRESH_TRIANGLE)
    #inverting the image
    img_bin = 255-img_bin
    
    # Length(width) of kernel as 100th of total width
    kernel_len = np.array(img).shape[1]//100
    
    # Defining a vertical kernel to detect all vertical lines of image 
    ver_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (1, kernel_len))
    
    # Defining a horizontal kernel to detect all horizontal lines of image
    hor_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (kernel_len, 1))
    
    # A kernel of 2x2
    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (2, 2))
    
    #Use vertical kernel to detect and save the vertical lines in a jpg
    image_1 = cv2.erode(img_bin, ver_kernel, iterations=3)
    vertical_lines = cv2.dilate(image_1, ver_kernel, iterations=3)
    #cv2.imwrite("vertical_lines.jpg",vertical_lines)
    
    #Use horizontal kernel to detect and save the horizontal lines in a jpg
    image_2 = cv2.erode(img_bin, hor_kernel, iterations=3)
    horizontal_lines = cv2.dilate(image_2, hor_kernel, iterations=3)
    #cv2.imwrite("horizontal_lines.jpg",horizontal_lines)
    
    # Weighting parameters, this will decide the quantity of an image to be added to make a new image.
    alpha = 0.5
    beta = 1.0 - alpha
    
    # This function helps to add two image with specific weight parameter to get a third image as summation of two image.
    table_extracted = cv2.addWeighted(vertical_lines, alpha, horizontal_lines, beta, 0.0)
    table_extracted = cv2.erode(~table_extracted, kernel, iterations=3)
    (thresh, table_extracted) = cv2.threshold(table_extracted,128, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)[:2]
    #cv2.imwrite("table_extracted.jpg", table_extracted)
    return(table_extracted)

#finding contour area

#funtion to find contours

def contour_area(image):
    contours, hierarchy = cv2.findContours(image, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    sort_contours_area = sorted(contours, key = cv2.contourArea, reverse=True)
    #print(type(sort_contours_area))
    #Version identification using selective contours area comparison
    """list = [round(x) for x in list]
    indices = [0, 2, 3, 7, 9, 11, 13, 17, 19, 25, 29, 35, 72, 79]
    list1 = []
    for index in indices:
        list1.append(list[index])
    print("\n", list1)
    return(list1)"""
    #Version identification using bigger 200 contours area comparison
    list = []   
    for cnt in sort_contours_area[0:200]:
       area = cv2.contourArea(cnt)
       list.append(area)
    list = [round(x) for x in list]
    return(list)

def identify(version):
    
    """#ACORD 127
    v0filled = [1261974, 600074, 567168, 566938, 536567, 510380, 449966, 395792, 276165, 271932, 271778, 270232, 267933, 267712, 267128, 263772, 233002, 223705, 191849, 160735, 159698, 159698, 159698, 159698, 159698, 159698, 158661, 158661, 157624, 147719, 128155, 128155, 126350, 126350, 126350, 126350, 126350, 123398, 123398, 121985, 121660, 121660, 121660, 121660, 121660, 121660, 121660, 115475, 114730, 114730, 114730, 114730, 114730, 114730, 113985, 113985, 113240, 108780, 107226, 92775, 91538, 87278, 72590, 69509, 68530, 68530, 67580, 67551, 67425, 57040, 56672, 56672, 56672, 56672, 56672, 56672, 56304, 56304, 55936, 52150, 52080, 47585, 47278, 47278, 47278, 47278, 47278, 47278, 46971, 46971, 46664, 39215, 31465, 31262, 31262, 31262, 31262, 31262, 31262, 31059, 31059, 30856, 25760, 25110, 24955, 24948, 24948, 24948, 24948, 24948, 24948, 24794, 24794, 24794, 24794, 24794, 24794, 24786, 24786, 24633, 24633, 24624, 24472, 23095, 22946, 22946, 22946, 22946, 22946, 22946, 22797, 22797, 22648, 22010, 21868, 21868, 21868, 21868, 21868, 21868, 21726, 21726, 21584, 21490, 17360, 17248, 17248, 17248, 17248, 17248, 17248, 17205, 17205, 17136, 17136, 17094, 17094, 17094, 17094, 17094, 17094, 17094, 17094, 17094, 17094, 17094, 17094, 17024, 16983, 16983, 16983, 16983, 16872, 16872, 15965, 15862, 15862, 15862, 15862, 15862, 15862, 15759, 15759, 15656, 14210, 13485, 13330, 13244, 13244, 13244, 13244, 13244, 13244, 13158, 13158, 13158, 13158, 13072, 11340, 11270]
    v1filled = [1226538, 1225532, 550804, 550612, 535182, 490245, 438186, 388532, 271350, 270572, 255936, 255936, 255781, 255763, 255162, 251811, 226550, 218158, 195872, 167761, 167761, 166650, 166650, 166650, 166650, 166650, 166650, 166650, 163317, 144687, 126630, 126630, 126630, 124821, 124821, 123012, 121520, 121520, 121518, 121450, 121203, 119780, 119715, 119715, 118050, 117980, 116312, 108990, 104319, 96187, 96187, 95550, 95550, 95550, 95550, 95550, 95550, 95550, 93639, 84535, 83912, 82678, 76659, 68950, 67965, 67965, 66138, 66138, 65995, 65700, 65700, 65700, 65700, 65700, 65700, 65700, 65550, 65250, 64386, 50550, 43953, 43488, 43488, 43200, 43200, 43200, 43200, 43200, 43200, 43200, 42336, 39150, 30222, 28237, 28237, 28050, 28050, 28050, 28050, 28050, 28050, 28050, 27489, 24311, 24311, 24311, 24311, 24150, 24150, 24150, 24150, 24150, 24150, 24150, 24150, 24150, 24150, 24150, 24150, 24150, 24150, 23667, 23667, 20838, 20838, 20838, 20838, 20838, 20838, 20700, 20700, 20700, 20700, 20700, 20700, 20700, 20700, 20700, 20700, 20700, 20700, 20700, 20700, 20700, 20700, 20700, 20700, 20700, 20700, 20700, 20687, 20687, 20550, 20550, 20550, 20550, 20550, 20550, 20550, 20286, 20286, 20286, 20139, 19872, 16912, 16912, 16800, 16800, 16800, 16800, 16800, 16800, 16800, 16464, 13288, 13288, 13288, 13288, 13200, 13200, 13200, 13200, 13200, 13200, 13200, 13200, 13200, 13200, 13200, 13200, 13200, 13200, 13200, 13200, 13050, 12936, 12936, 12903, 11109, 11109]
    v2filled = [1226898, 1214444, 992719, 685403, 556053, 532470, 530696, 458205, 433086, 274892, 269490, 261860, 245106, 242190, 226252, 204782, 169024, 168738, 167168, 166801, 166360, 165968, 165750, 164576, 164576, 163753, 151164, 128155, 127006, 126716, 126350, 124896, 123224, 122888, 122506, 121794, 121766, 121584, 121320, 121310, 118500, 117844, 112912, 108920, 106198, 100514, 97432, 97432, 96791, 96151, 96150, 96150, 95550, 94868, 94868, 94676, 86136, 84116, 77975, 77064, 76296, 71649, 69160, 66880, 66732, 66291, 66000, 66000, 65624, 65560, 65560, 65250, 65120, 65120, 65120, 62244, 50550, 44734, 44474, 44384, 43902, 43800, 43800, 43800, 43800, 43216, 43216, 43216, 39000, 29961, 28880, 28880, 28658, 28650, 28650, 28610, 28500, 28268, 28268, 27932, 24624, 24624, 24462, 24450, 24378, 24310, 24300, 24124, 23976, 23822, 23712, 23712, 23416, 23400, 23250, 23250, 23095, 23088, 22940, 22788, 21128, 21128, 20989, 20850, 20718, 20711, 20572, 20572, 20572, 20520, 20520, 20446, 20368, 20368, 20252, 20250, 20250, 20250, 20250, 20234, 20216, 20216, 20214, 20148, 20100, 20100, 20100, 19980, 19980, 19980, 19966, 19950, 19950, 19950, 19950, 19832, 19832, 19832, 19814, 19684, 19684, 17176, 17176, 17063, 17060, 16950, 16950, 16950, 16724, 16724, 16724, 14601, 14440, 14250, 14250, 14250, 14246, 14208, 14155, 14060, 14060, 13528, 13382, 13376, 13376, 13286, 13200, 13200, 13185, 13137, 13112, 13112, 13024, 13024, 13024, 11247, 10695, 9476, 9318, 9190]
        
    Version_Vs_V0Filled = [i / j for i, j in zip(v0filled, version)]
    x = statistics.stdev(Version_Vs_V0Filled)
    Version_Vs_V1Filled = [i / j for i, j in zip(v1filled, version)]
    y = statistics.stdev(Version_Vs_V1Filled)
    Version_Vs_V2Filled = [i / j for i, j in zip(v2filled, version)]
    z = statistics.stdev(Version_Vs_V2Filled)
    
    dictionary = {"\nThe identified version is V0": x, "\nThe identified version is V1": y, "\nThe identified version is V2": z}
    # get key with min value
    min_key = min(dictionary, key=dictionary.get)
    return print(min_key)"""

    #ACORD 163
    v0filled = [924890, 548115, 531352, 498292, 283543, 258976, 228482, 212502, 165930, 165922, 165781, 165772, 165636, 165632, 165522, 165310, 165184, 165163, 164994, 164966, 164942, 164923, 164851, 164811, 164746, 164660, 164646, 164587, 164442, 164158, 164056, 162284, 105860, 101466, 94543, 94478, 94447, 94404, 94346, 94344, 94288, 94272, 94194, 94177, 94140, 94100, 94057, 94007, 93882, 93868, 93850, 93844, 93816, 93772, 93750, 93414, 93226, 92523, 86596, 84864, 84232, 75632, 65012, 64990, 64959, 64850, 64772, 64702, 64684, 64672, 64644, 64604, 64600, 64597, 64582, 64526, 64514, 64500, 64486, 64386, 64296, 64215, 64190, 64172, 64108, 63576, 43004, 42915, 42818, 42772, 42760, 42755, 42721, 42680, 42640, 42611, 42608, 42606, 42600, 42564, 42509, 42504, 42496, 42476, 42404, 42365, 42203, 42162, 42116, 42056, 41993, 29620, 28092, 28087, 28010, 28007, 28002, 28002, 27960, 27950, 27945, 27932, 27928, 27910, 27900, 27890, 27830, 27756, 27750, 27708, 27690, 27660, 27658, 27630, 27552, 27519, 24295, 24264, 24232, 24232, 24230, 24204, 24203, 24200, 24188, 24188, 24156, 24135, 24122, 24099, 24080, 24036, 24032, 24013, 24001, 23998, 23992, 23984, 23976, 23967, 23959, 23956, 23944, 23930, 23917, 23906, 23890, 23887, 23886, 23862, 23841, 23832, 23832, 23804, 23798, 23778, 23770, 23722, 23648, 23642, 23624, 23604, 23568, 23350, 20788, 20784, 20773, 20772, 20766, 20756, 20744, 20743, 20740, 20736, 20736, 20735, 20729, 20723, 20722, 20714]
    v1filled = [967964, 577839, 565582, 531445, 291824, 278600, 191542, 176258, 173013, 173011, 173008, 173002, 172994, 172992, 172992, 172992, 171925, 171925, 171922, 171921, 171918, 171916, 171910, 171910, 171908, 171908, 171906, 170829, 170822, 170816, 137376, 134832, 134832, 134832, 134832, 134832, 134832, 134832, 134832, 133984, 133984, 133984, 133984, 133984, 133984, 133984, 133984, 133984, 133984, 133984, 133136, 133136, 133136, 115366, 106012, 91374, 90520, 87200, 85560, 67840, 57672, 57186, 56604, 56604, 56604, 56604, 56604, 56604, 56604, 56604, 56250, 56248, 56248, 56248, 56248, 56248, 56248, 56248, 56248, 56248, 56248, 56127, 56127, 56127, 56127, 56127, 56127, 56127, 56127, 55892, 55892, 55892, 55774, 55774, 55774, 55774, 55774, 55774, 55774, 55774, 55774, 55774, 55774, 55421, 55421, 55421, 28480, 28240, 25920, 25758, 25440, 25440, 25440, 25440, 25440, 25440, 25440, 25440, 25281, 25281, 25281, 25281, 25281, 25281, 25281, 25281, 25280, 25280, 25280, 25280, 25280, 25280, 25280, 25280, 25280, 25280, 25280, 25122, 25122, 25122, 25122, 25122, 25122, 25122, 25122, 25122, 25122, 25122, 25120, 25120, 25120, 24963, 24963, 24963, 23328, 23004, 22896, 22896, 22896, 22896, 22896, 22896, 22896, 22896, 22752, 22752, 22752, 22752, 22752, 22752, 22752, 22752, 22752, 22752, 22752, 22608, 22608, 22608, 22578, 22578, 22578, 22578, 22578, 22578, 22578, 22578, 22436, 22436, 22436, 22436, 22436, 22436, 22436, 22436, 22436, 22436, 22436, 22294, 22294, 22294]
    Version_Vs_V0Filled = [i / j for i, j in zip(v0filled, version)]
    x = statistics.stdev(Version_Vs_V0Filled)
    Version_Vs_V1Filled = [i / j for i, j in zip(v1filled, version)]
    y = statistics.stdev(Version_Vs_V1Filled)
    
    dictionary = {"\nThe identified version is V0": x, "\nThe identified version is V1": y}
    # get key with min value
    min_key = min(dictionary, key=dictionary.get)
    return print(min_key)

identify(contour_area(extract_table(cv2.imread("v1ver.jpg", 0))))